const assert = require('assert') //(standard node lib) used for making assertion about test
const ganache = require('ganache-cli') // module to help create our local test network for testing
const Web3 = require('web3') // constructor function
const web3 = new Web3(ganache.provider())
const { interface, bytecode } = require('../compile')

//initialzing global variables
let accounts
let inbox

beforeEach(async () => {
	//Get a list of all unlocked accounts generated by ganache
	accounts = await web3.eth.getAccounts()

	//use one of those accounts to deploy the contract
	lottery = await new web3.eth.Contract(JSON.parse(interface))
		.deploy({ data: bytecode }) // tell web3 we want to deploy a new contract
		.send({ from: accounts[0], gas: '1000000' })
})

describe('Lottery', () => {
	it('deploys a contract', () => {
		assert.ok(lottery.options.address)
	})

	it('allows one account to enter', async () => {
		await lottery.methods.enter().send({
			from: accounts[0],
			value: web3.utils.toWei('0.02', 'ether'),
		})

		const player = await lottery.methods
			.getPlayers()
			.call({ from: accounts[0] })

		assert.equal(accounts[0], player[0])
		assert.equal(1, player.length)
	})

	it('allows multiple account to enter', async () => {
		await lottery.methods.enter().send({
			from: accounts[0],
			value: web3.utils.toWei('0.02', 'ether'),
		})
		await lottery.methods.enter().send({
			from: accounts[1],
			value: web3.utils.toWei('0.02', 'ether'),
		})
		await lottery.methods.enter().send({
			from: accounts[2],
			value: web3.utils.toWei('0.02', 'ether'),
		})

		const player = await lottery.methods
			.getPlayers()
			.call({ from: accounts[0] })

		assert.equal(accounts[0], player[0])
		assert.equal(accounts[1], player[1])
		assert.equal(accounts[2], player[2])
		assert.equal(3, player.length)
	})

	it('requires a minimum amount of ether to enter', async () => {
		try {
			await lottery.methods.enter().send({
				from: accounts[0],
				value: 150,
			})
			assert(false)
		} catch (err) {
			assert(err)
		}
	})

	it('only manager can call', async () => {
		try {
			await lottery.methods.pickWinner().send({
				from: accounts[1],
			})
			assert(false)
		} catch (err) {
			assert(err)
		}
	})
})
